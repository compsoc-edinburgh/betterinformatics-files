'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function emptyFn() {}

var Textarea = function (_Component) {
  _inherits(Textarea, _Component);

  function Textarea(props) {
    _classCallCheck(this, Textarea);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Textarea).call(this, props));

    _this.state = {
      value: props.defaultValue
    };

    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(Textarea, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.recomputeSize();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.recomputeSize();
    }
  }, {
    key: 'recomputeSize',
    value: function recomputeSize() {

      if (!this.props.autoGrow) {
        return;
      }

      var diff;
      var node = (0, _reactDom.findDOMNode)(this);

      if (global.getComputedStyle) {
        var styles = global.getComputedStyle(node);

        // If the textarea is set to border-box, it's not necessary to
        // subtract the padding.
        if (styles.getPropertyValue('box-sizing') === "border-box" || styles.getPropertyValue('-moz-box-sizing') === "border-box" || styles.getPropertyValue('-webkit-box-sizing') === "border-box") {
          diff = 0;
        } else {
          diff = parseInt(styles.getPropertyValue('padding-bottom') || 0, 10) + parseInt(styles.getPropertyValue('padding-top') || 0, 10);
        }
      } else {
        diff = 0;
      }

      node.style.minHeight = node.scrollHeight - diff + 'px';
    }
  }, {
    key: 'render',
    value: function render() {

      var props = this.prepareProps(this.props, this.state);

      return _react2.default.createElement('textarea', props);
    }
  }, {
    key: 'prepareProps',
    value: function prepareProps(thisProps, state) {

      var props = (0, _objectAssign2.default)({}, thisProps);

      props.value = this.prepareValue(props, state);

      props.style = this.prepareStyle(props);
      props.onChange = this.handleChange;

      return props;
    }
  }, {
    key: 'prepareValue',
    value: function prepareValue(props, state) {
      return props.value == null ? state.value : props.value;
    }
  }, {
    key: 'handleChange',
    value: function handleChange(event) {

      if (this.props.stopChangePropagation) {
        event.stopPropagation();
      }

      var value = event.target.value;

      if (this.props.value == null) {
        this.setState({
          value: value
        });
      } else {
        //controlled mode
        this.recomputeSize();
      }

      ;(this.props.onChange || emptyFn)(value, event);
    }
  }, {
    key: 'prepareStyle',
    value: function prepareStyle(props) {

      var resizeStyle = {};

      if (props.resize === true) {
        resizeStyle.resize = 'both';
      } else if (props.resize === false) {
        resizeStyle.resize = 'none';
      } else if (typeof props.resize == 'string') {
        resizeStyle.resize = props.resize;
      }

      return (0, _objectAssign2.default)({}, resizeStyle, props.maxHeight ? { maxHeight: props.maxHeight } : null, props.style);
    }
  }]);

  return Textarea;
}(_react.Component);

exports.default = Textarea;

Textarea.propTypes = {
  autoGrow: _react.PropTypes.bool,
  resize: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.string]),
  stopChangePropagation: _react.PropTypes.bool,
  maxHeight: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};

Textarea.defaultProps = {
  autoGrow: false,
  resize: true,
  maxHeight: null,
  stopChangePropagation: true
};