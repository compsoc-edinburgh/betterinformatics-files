import React, { Component, PropTypes } from 'react'
import { findDOMNode } from 'react-dom'
import assign from 'object-assign'

function emptyFn(){}

export default class Textarea extends Component {

  constructor(props){

    super(props);

    this.state = {
      value: props.defaultValue
    }

    this.handleChange = this.handleChange.bind(this)
  }

  componentDidMount(){
    this.recomputeSize()
  }

  componentDidUpdate(){
    this.recomputeSize()
  }

  recomputeSize(){

    if (!this.props.autoGrow){
      return
    }

    var diff;
    var node = findDOMNode(this);

    if (global.getComputedStyle) {
      var styles = global.getComputedStyle(node)

      // If the textarea is set to border-box, it's not necessary to
      // subtract the padding.
      if (styles.getPropertyValue('box-sizing') === "border-box" ||
        styles.getPropertyValue('-moz-box-sizing') === "border-box" ||
        styles.getPropertyValue('-webkit-box-sizing') === "border-box") {
        diff = 0
      } else {
        diff = (
          parseInt(styles.getPropertyValue('padding-bottom') || 0, 10) +
          parseInt(styles.getPropertyValue('padding-top') || 0, 10)
        )
      }
    } else {
      diff = 0
    }

    node.style.minHeight = (node.scrollHeight - diff) + 'px'
  }


  render() {

    const props = this.prepareProps(this.props, this.state)

    return (
      <textarea {...props} />
    )
  }

  prepareProps(thisProps, state){

    const props = assign({}, thisProps)

    props.value = this.prepareValue(props, state)

    props.style = this.prepareStyle(props)
    props.onChange = this.handleChange

    return props
  }

  prepareValue(props, state){
    return props.value == null?
            state.value:
            props.value
  }

  handleChange(event){

    if (this.props.stopChangePropagation){
      event.stopPropagation();
    }

    const value = event.target.value

    if (this.props.value == null){
      this.setState({
        value: value
      })
    } else {
      //controlled mode
      this.recomputeSize()
    }

    ;(this.props.onChange || emptyFn)(value, event)
  }

  prepareStyle(props){

    const resizeStyle = {}

    if (props.resize === true){
      resizeStyle.resize = 'both'
    } else if (props.resize === false){
      resizeStyle.resize = 'none'
    } else if (typeof props.resize == 'string'){
      resizeStyle.resize = props.resize
    }

    return assign({}, resizeStyle, props.maxHeight? {maxHeight: props.maxHeight}: null, props.style)
  }

}

Textarea.propTypes = {
  autoGrow: PropTypes.bool,
  resize: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
  stopChangePropagation: PropTypes.bool,
  maxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
}

Textarea.defaultProps = {
  autoGrow: false,
  resize: true,
  maxHeight: null,
  stopChangePropagation: true
}
