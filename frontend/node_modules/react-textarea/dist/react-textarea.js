(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("React"));
	else if(typeof define === 'function' && define.amd)
		define(["React"], factory);
	else if(typeof exports === 'object')
		exports["ReactTextarea"] = factory(require("React"));
	else
		root["ReactTextarea"] = factory(root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */'use strict';

	var React = __webpack_require__(1)
	var assign = __webpack_require__(2)

	function emptyFn(){}

	module.exports = React.createClass({

		displayName: 'ReactTextarea',

		componentDidMount: function(){
			this.recomputeSize()
		},

		componentDidUpdate: function(){
			this.recomputeSize()
		},

		recomputeSize: function(){
			var diff
		    var node = this.getDOMNode()

		    if (window.getComputedStyle) {
		      	var styles = window.getComputedStyle(node)

		      	// If the textarea is set to border-box, it's not necessary to
		      	// subtract the padding.
		      	if (styles.getPropertyValue('box-sizing') === "border-box" ||
		        	styles.getPropertyValue('-moz-box-sizing') === "border-box" ||
		          	styles.getPropertyValue('-webkit-box-sizing') === "border-box") {
		        	diff = 0
		      	} else {
		        	diff = (
		          		parseInt(styles.getPropertyValue('padding-bottom') || 0, 10) +
		          		parseInt(styles.getPropertyValue('padding-top') || 0, 10)
		        	)
		      	}
		    } else {
		      	diff = 0
		    }

		    // node.style.height = 'auto';
		    node.style.height = (node.scrollHeight - diff) + 'px'
		},

		getInitialState: function(){
			return {
				defaultValue: this.props.defaultValue
			}
		},

		getDefaultProps: function(){
			return {
				autoGrow: false,
				resize: 'horizontal',
				emptyValue: ''

				//defaultStyle
				//invalidStyle
				//emptyStyle
				//emptyClassName
				//invalidClassName
			}
		},

		render: function() {

			var props = this.prepareProps(this.props, this.state)

			return (
				React.createElement("textarea", React.__spread({},  props))
			)
		},

		prepareProps: function(thisProps, state){

			var props = assign({}, thisProps)

			props.value = this.prepareValue(props, state)
			props.valid = this.isValid(props)

			props.className = this.prepareClassName(props)
			props.style = this.prepareStyle(props)
			props.onChange = this.handleChange

			return props
		},

		isValid: function(props) {
		    var value = props.value
		    var result = true

		    if (typeof props.validate === 'function'){
		        result = props.validate(value, props) !== false
		    }

		    return result
		},

		prepareValue: function(props, state){
			var value = props.value == null?
							state.defaultValue:
							props.value

			return value
		},

		handleChange: function(event){
			var value = event.target.value

			if (this.props.value == null){
				this.setState({
					defaultValue: value
				})
			} else {
				//controlled mode
				this.recomputeSize()
			}

			;(this.props.onChange || emptyFn)(value, event)
		},

		getEmptyValue: function(props){
		    var value = props.emptyValue

		    if (typeof value === 'function'){
		        value = value(props)
		    }

		    return value
		},

		isEmpty: function(props){

		    var emptyValue = this.getEmptyValue(props)

		    if (typeof props.isEmpty === 'function'){
		        return props.isEmpty(props, emptyValue)
		    }

		    return props.value + '' === emptyValue + ''
		},

		prepareClassName: function(props) {
		    var result = [props.className]

		    if (props.emptyClassName && this.isEmpty(props)){
		        result.push(props.emptyClassName)
		    }

		    if (props.invalidClassName && !props.valid){
		        result.push(props.invalidClassName)
		    }

		    return result.filter(function(x){ return !!x }).join(' ')
		},

		prepareStyle: function(props){

			var resizeStyle = {}

			if (props.resize === true){
				resizeStyle.resize = 'both'
			} else if (props.resize === false){
				resizeStyle.resize = 'none'
			} else if (typeof props.resize == 'string'){
				resizeStyle.resize = props.resize
			}

			var style = assign({}, props.defaultStyle, props.style, resizeStyle)

			if (props.emptyStyle && this.isEmpty(props)){
				assign(style, props.emptyStyle)
			}

			if (!props.valid){
			    assign(style, props.defaultInvalidStyle, props.invalidStyle)
			}

			return style
		}

	})

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};


/***/ }
/******/ ])
});
